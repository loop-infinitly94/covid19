{"version":3,"sources":["table.js","worlddetails.js","dialog.js","search.js","datasection.js","App.js","serviceWorker.js","index.js"],"names":["descendingComparator","a","b","orderBy","EnhancedTableHead","props","classes","order","onSelectAllClick","onRequestSort","numSelected","rowCount","TableHead","TableRow","className","columns","map","headCell","TableCell","key","id","align","numeric","padding","disablePadding","sortDirection","TableSortLabel","active","direction","onClick","property","event","label","visuallyHidden","makeStyles","theme","root","paddingLeft","spacing","paddingRight","highlight","palette","type","color","secondary","main","backgroundColor","lighten","light","text","primary","dark","title","flex","useStyles","width","paper","marginBottom","border","clip","height","margin","overflow","position","top","EnhancedTable","React","useState","setOrder","defaultSort","setOrderBy","selected","setSelected","page","setPage","dense","setDense","rowsPerPage","setRowsPerPage","emptyRows","Math","min","rows","length","Paper","TableContainer","Table","table","aria-labelledby","size","aria-label","target","checked","newSelecteds","n","name","TableBody","array","comparator","stabilizedThis","el","index","sort","stableSort","getComparator","slice","row","isItemSelected","country","indexOf","hover","selectedIndex","newSelected","concat","undefined","getCurrentSelectedRow","handleClick","role","aria-checked","tabIndex","column","value","format","style","colSpan","TablePagination","rowsPerPageOptions","component","count","onChangePage","newPage","onChangeRowsPerPage","parseInt","FormControlLabel","control","Switch","onChange","minWidth","bullet","display","transform","fontSize","pos","WorldDetils","details","Card","CardContent","Typography","variant","cases","total","deaths","recovered","gutterBottom","new","PaperComponent","handle","cancel","DraggableDialog","open","setOpen","handleClose","tableSelection","onCloseDialog","Dialog","onClose","fullWidth","DialogTitle","cursor","currentRow","DialogContent","totalCases","totalDeaths","newCases","newDeaths","DialogActions","Button","autoFocus","option","marginRight","CountrySelect","countries","list","tempObj","eachCountry","push","getCountries","countrySlug","Autocomplete","options","onChangeSearch","autoHighlight","getOptionLabel","renderOption","Fragment","renderInput","params","TextField","inputProps","autoComplete","DataSection","state","isLoading","summaryData","tableRow","countryData","countryTableRow","searchValue","worldSummary","Today","Date","temp","setDate","getDate","Yesterday","this","setState","axios","get","then","response","console","log","status","data","setDataForTable","refreshData","setInterval","tempArray","createData","tableOrigRow","eachData","activeCases","criticalCases","critical","date","today","dd","mm","getMonth","getFullYear","prevState","prevProps","filterTable","eachRow","toLowerCase","spinner","Object","keys","bind","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.2b386cff.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport clsx from 'clsx';\r\nimport { lighten, makeStyles } from '@material-ui/core/styles';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TablePagination from '@material-ui/core/TablePagination';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport TableSortLabel from '@material-ui/core/TableSortLabel';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Switch from '@material-ui/core/Switch';\r\n// import DeleteIcon from '@material-ui/icons/Delete';\r\n// import FilterListIcon from '@material-ui/icons/FilterList';\r\n\r\n\r\nfunction descendingComparator(a, b, orderBy) {\r\n  if (b[orderBy] < a[orderBy]) {\r\n    return -1;\r\n  }\r\n  if (b[orderBy] > a[orderBy]) {\r\n    return 1;\r\n  }\r\n  return 0;\r\n}\r\n\r\nfunction getComparator(order, orderBy) {\r\n  return order === 'desc'\r\n    ? (a, b) => descendingComparator(a, b, orderBy)\r\n    : (a, b) => -descendingComparator(a, b, orderBy);\r\n}\r\n\r\nfunction stableSort(array, comparator) {\r\n  const stabilizedThis = array.map((el, index) => [el, index]);\r\n  stabilizedThis.sort((a, b) => {\r\n    const order = comparator(a[0], b[0]);\r\n    if (order !== 0) return order;\r\n    return a[1] - b[1];\r\n  });\r\n  return stabilizedThis.map((el) => el[0]);\r\n}\r\n\r\nfunction EnhancedTableHead(props) {\r\n  const { classes, onSelectAllClick, order, orderBy, numSelected, rowCount, onRequestSort } = props;\r\n  const createSortHandler = (property) => (event) => {\r\n    onRequestSort(event, property);\r\n  };\r\n\r\n  return (\r\n    <TableHead>\r\n      <TableRow className = \"tableRow\">\r\n        {/* <TableCell padding=\"checkbox\">\r\n          <Checkbox\r\n            indeterminate={numSelected > 0 && numSelected < rowCount}\r\n            checked={rowCount > 0 && numSelected === rowCount}\r\n            onChange={onSelectAllClick}\r\n            inputProps={{ 'aria-label': 'select all desserts' }}\r\n          />\r\n        </TableCell> */}\r\n        {props.columns.map((headCell) => (\r\n          <TableCell\r\n            key={headCell.id}\r\n            align={headCell.numeric ? 'right' : 'left'}\r\n            padding={headCell.disablePadding ? 'none' : 'default'}\r\n            sortDirection={orderBy === headCell.id ? order : false}\r\n            className = \"tableCell\"\r\n          >\r\n            <TableSortLabel\r\n              active={orderBy === headCell.id}\r\n              direction={orderBy === headCell.id ? order : 'asc'}\r\n              onClick={createSortHandler(headCell.id)}\r\n            >\r\n              {headCell.label}\r\n              {orderBy === headCell.id ? (\r\n                <span className={classes.visuallyHidden}>\r\n                  {order === 'desc' ? 'sorted descending' : 'sorted ascending'}\r\n                </span>\r\n              ) : null}\r\n            </TableSortLabel>\r\n          </TableCell>\r\n        ))}\r\n      </TableRow>\r\n    </TableHead>\r\n  );\r\n}\r\n\r\nEnhancedTableHead.propTypes = {\r\n  classes: PropTypes.object.isRequired,\r\n  numSelected: PropTypes.number.isRequired,\r\n  onRequestSort: PropTypes.func.isRequired,\r\n  onSelectAllClick: PropTypes.func.isRequired,\r\n  order: PropTypes.oneOf(['asc', 'desc']).isRequired,\r\n  orderBy: PropTypes.string.isRequired,\r\n  rowCount: PropTypes.number.isRequired,\r\n};\r\n\r\nconst useToolbarStyles = makeStyles((theme) => ({\r\n  root: {\r\n    paddingLeft: theme.spacing(2),\r\n    paddingRight: theme.spacing(1),\r\n  },\r\n  highlight:\r\n    theme.palette.type === 'light'\r\n      ? {\r\n          color: theme.palette.secondary.main,\r\n          backgroundColor: lighten(theme.palette.secondary.light, 0.85),\r\n        }\r\n      : {\r\n          color: theme.palette.text.primary,\r\n          backgroundColor: theme.palette.secondary.dark,\r\n        },\r\n  title: {\r\n    flex: '1 1 100%',\r\n  },\r\n}));\r\n\r\n// const EnhancedTableToolbar = (props) => {\r\n//   const classes = useToolbarStyles();\r\n//   const { numSelected } = props;\r\n\r\n//   return (\r\n//     <Toolbar\r\n//       className={clsx(classes.root, {\r\n//         [classes.highlight]: numSelected > 0,\r\n//       })}\r\n//     >\r\n//       {numSelected > 0 ? (\r\n//         <Typography className={classes.title} color=\"inherit\" variant=\"subtitle1\" component=\"div\">\r\n//           {numSelected} selected\r\n//         </Typography>\r\n//       ) : (\r\n//         <Typography className={classes.title} variant=\"h6\" id=\"tableTitle\" component=\"div\">\r\n//           Nutrition\r\n//         </Typography>\r\n//       )}\r\n\r\n//       {numSelected > 0 ? (\r\n//         <Tooltip title=\"Delete\">\r\n//           <IconButton aria-label=\"delete\">\r\n//             <DeleteIcon />\r\n//           </IconButton>\r\n//         </Tooltip>\r\n//       ) : (\r\n//         <Tooltip title=\"Filter list\">\r\n//           <IconButton aria-label=\"filter list\">\r\n//             <FilterListIcon />\r\n//           </IconButton>\r\n//         </Tooltip>\r\n//       )}\r\n//     </Toolbar>\r\n//   );\r\n// };\r\n\r\n// EnhancedTableToolbar.propTypes = {\r\n//   numSelected: PropTypes.number.isRequired,\r\n// };\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    width: '100%',\r\n  },\r\n  paper: {\r\n    width: '100%',\r\n    marginBottom: theme.spacing(2),\r\n  },\r\n  visuallyHidden: {\r\n    border: 0,\r\n    clip: 'rect(0 0 0 0)',\r\n    height: 1,\r\n    margin: -1,\r\n    overflow: 'hidden',\r\n    padding: 0,\r\n    position: 'absolute',\r\n    top: 20,\r\n    width: 1,\r\n  },\r\n}));\r\n\r\nexport default function EnhancedTable(props) {\r\n    // console.log(props)\r\n  const classes = useStyles();\r\n  const [order, setOrder] = React.useState('desc');\r\n  const [orderBy, setOrderBy] = React.useState(props.defaultSort);\r\n  const [selected, setSelected] = React.useState([]);\r\n  const [page, setPage] = React.useState(0);\r\n  const [dense, setDense] = React.useState(false);\r\n  const [rowsPerPage, setRowsPerPage] = React.useState(10);\r\n\r\n  const handleRequestSort = (event, property) => {\r\n    const isAsc = orderBy === property && order === 'asc';\r\n    setOrder(isAsc ? 'desc' : 'asc');\r\n    setOrderBy(property);\r\n  };\r\n\r\n  const handleSelectAllClick = (event) => {\r\n    if (event.target.checked) {\r\n      const newSelecteds = props.rows.map((n) => n.name);\r\n      setSelected(newSelecteds);\r\n      return;\r\n    }\r\n    setSelected([]);\r\n  };\r\n\r\n  const handleClick = (event, row) => {\r\n    const selectedIndex = selected.indexOf(row.country);\r\n    let newSelected = [];\r\n\r\n    if (selectedIndex === -1) {\r\n      newSelected = newSelected.concat(selected, row.country);\r\n    } else if (selectedIndex === 0) {\r\n      newSelected = newSelected.concat(selected.slice(1));\r\n    } else if (selectedIndex === selected.length - 1) {\r\n      newSelected = newSelected.concat(selected.slice(0, -1));\r\n    } else if (selectedIndex > 0) {\r\n      newSelected = newSelected.concat(\r\n        selected.slice(0, selectedIndex),\r\n        selected.slice(selectedIndex + 1),\r\n      );\r\n    }\r\n\r\n    setSelected(newSelected);\r\n    if(props.getCurrentSelectedRow !== undefined){\r\n      props.getCurrentSelectedRow(row, setSelected)\r\n    }\r\n    \r\n  };\r\n\r\n  const handleChangePage = (event, newPage) => {\r\n    setPage(newPage);\r\n  };\r\n\r\n  const handleChangeRowsPerPage = (event) => {\r\n    setRowsPerPage(parseInt(event.target.value, 10));\r\n    setPage(0);\r\n  };\r\n\r\n  const handleChangeDense = (event) => {\r\n    setDense(event.target.checked);\r\n  };\r\n\r\n  const isSelected = (name) => selected.indexOf(name) !== -1;\r\n\r\n  const emptyRows = rowsPerPage - Math.min(rowsPerPage, props.rows.length - page * rowsPerPage);\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <Paper className={classes.paper}>\r\n        {/* <EnhancedTableToolbar numSelected={selected.length} /> */}\r\n        <TableContainer>\r\n          <Table\r\n            className={classes.table}\r\n            aria-labelledby=\"tableTitle\"\r\n            size={dense ? 'small' : 'medium'}\r\n            aria-label=\"enhanced table\"\r\n          >\r\n            <EnhancedTableHead\r\n              classes={classes}\r\n              numSelected={selected.length}\r\n              order={order}\r\n              orderBy={orderBy}\r\n              onSelectAllClick={handleSelectAllClick}\r\n              onRequestSort={handleRequestSort}\r\n              rowCount={props.rows.length}\r\n              columns = {props.columns}\r\n            />\r\n            <TableBody>\r\n              {stableSort(props.rows, getComparator(order, orderBy))\r\n                .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\r\n                .map((row, index) => {\r\n                  const isItemSelected = isSelected(row.country);\r\n                  const labelId = `enhanced-table-checkbox-${index}`;\r\n\r\n                  return (\r\n                    <TableRow\r\n                      hover\r\n                      onClick={(event) => handleClick(event, row)}\r\n                      role=\"checkbox\"\r\n                      aria-checked={isItemSelected}\r\n                      tabIndex={-1}\r\n                      key={index}\r\n                      selected={isItemSelected}\r\n                      className = \"tableRow\"\r\n                    >\r\n                      {/* <TableRow hover role=\"checkbox\" tabIndex={-1} key={row.code}> */}\r\n                  {props.columns.map((column) => {\r\n                    const value = row[column.id];\r\n                    return (\r\n                      <TableCell className = \"tableCell\" key={column.id} align={column.align}>\r\n                        {column.format && typeof value === 'number' ? column.format(value) : value}\r\n                      </TableCell>\r\n                    );\r\n                  })}\r\n                {/* </TableRow> */}\r\n                    </TableRow>\r\n                  );\r\n                })}\r\n              {emptyRows > 0 && (\r\n                <TableRow style={{ height: (dense ? 33 : 53) * emptyRows }}>\r\n                  <TableCell colSpan={6} />\r\n                </TableRow>\r\n              )}\r\n            </TableBody>\r\n          </Table>\r\n        </TableContainer>\r\n        <TablePagination\r\n          rowsPerPageOptions={[5, 10, 25]}\r\n          component=\"div\"\r\n          count={props.rows.length}\r\n          rowsPerPage={rowsPerPage}\r\n          page={page}\r\n          onChangePage={handleChangePage}\r\n          onChangeRowsPerPage={handleChangeRowsPerPage}\r\n        />\r\n      </Paper>\r\n      <FormControlLabel\r\n        control={<Switch checked={dense} onChange={handleChangeDense} />}\r\n        label=\"Dense padding\"\r\n      />\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Button from '@material-ui/core/Button';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    minWidth: 275,\r\n  },\r\n  bullet: {\r\n    display: 'inline-block',\r\n    margin: '0 2px',\r\n    transform: 'scale(0.8)',\r\n  },\r\n  title: {\r\n    fontSize: 14,\r\n  },\r\n  pos: {\r\n    marginBottom: 12,\r\n  },\r\n});\r\n\r\nexport default function WorldDetils(props) {\r\n    var details = props.details;\r\n// console.log(detials)\r\n  const classes = useStyles();\r\n  const bull = <span className={classes.bullet}>•</span>;\r\n\r\n  return (\r\n    <div className = \"SummaryContianer\">\r\n        <div className = \"Summary\">\r\n          <Card className={classes.root}>\r\n          <CardContent className = \"Cases commonCard\">\r\n            <Typography className={classes.pos}>\r\n                  Total Cases\r\n              </Typography>\r\n              <Typography className={\"Total\"} variant=\"h5\" component=\"h2\">\r\n              {details.cases.total}\r\n              </Typography>\r\n              \r\n          </CardContent>\r\n          <CardContent className = \"Death commonCard\">\r\n            <Typography className={classes.pos}>\r\n              Total Deaths\r\n              </Typography>\r\n              <Typography className={\"Deaths\"} variant=\"h5\" component=\"h2\">\r\n              {details.deaths.total}\r\n              </Typography>\r\n              \r\n          </CardContent>\r\n          <CardContent className = \"Recovery commonCard\">\r\n          <Typography className={classes.pos}>\r\n            Total Recovered\r\n            </Typography>\r\n            <Typography className={\"Recovered\"} variant=\"h5\" component=\"h2\">\r\n                {details.cases.recovered}\r\n            </Typography>\r\n              \r\n          </CardContent>\r\n          \r\n          </Card>\r\n            \r\n            \r\n            \r\n        </div>\r\n        <div className = \"summary2\">\r\n          <Card className={classes.root}>\r\n          <CardContent className = \"Cases commonCard\">\r\n              <Typography className={classes.title} color=\"textSecondary\" gutterBottom>\r\n              Newly Confirmed\r\n              </Typography>\r\n              <Typography variant=\"h5\" component=\"h2\">\r\n              {details.cases.new}\r\n              </Typography>\r\n              \r\n          </CardContent>\r\n          <CardContent className = \"Death commonCard\">\r\n              <Typography className={classes.pos} color=\"textSecondary\">\r\n              New Deaths\r\n              </Typography>\r\n              <Typography variant=\"h5\" component=\"h2\">\r\n              {details.deaths.new}\r\n              </Typography>\r\n              \r\n          </CardContent>\r\n          {/* <CardContent className = \"Recovery commonCard\">\r\n              <Typography className={classes.pos} color=\"textSecondary\">\r\n              NewRecovered\r\n              </Typography>\r\n              <Typography variant=\"h5\" component=\"h2\">\r\n                  {details.cases.recovered}\r\n              </Typography>\r\n              \r\n          </CardContent> */}\r\n          \r\n          </Card>\r\n        </div>\r\n        \r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Draggable from 'react-draggable';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\n\r\n// import Table from './table'\r\n\r\nfunction PaperComponent(props) {\r\n  return (\r\n    <Draggable handle=\"#draggable-dialog-title\" cancel={'[class*=\"MuiDialogContent-root\"]'}>\r\n      <Paper {...props} />\r\n    </Draggable>\r\n  );\r\n}\r\n\r\nexport default function DraggableDialog(props) {\r\n  // console.log(props);\r\n  const [open, setOpen] = React.useState(true);\r\n\r\n  const handleClickOpen = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    props.tableSelection([])\r\n    setOpen(false);\r\n    props.onCloseDialog()\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Dialog\r\n        open={open}\r\n        onClose={handleClose}\r\n        PaperComponent={PaperComponent}\r\n        aria-labelledby=\"draggable-dialog-title\"\r\n        fullWidth = {true}\r\n      >\r\n        <DialogTitle style={{ cursor: 'move' }} id=\"draggable-dialog-title\">\r\n          {props.currentRow.country}\r\n        </DialogTitle>\r\n        <DialogContent> \r\n          <div className = \"SummaryDilaog\">\r\n              <div className = \"casescummary\">\r\n              \r\n                <Typography className={\"dialogP\"}>\r\n                      Total Cases\r\n                  </Typography>\r\n                  <Typography className={\"Total\"} variant=\"h5\" component=\"h2\">\r\n                  {props.currentRow.totalCases}\r\n                  </Typography>\r\n                  \r\n              \r\n              \r\n                <Typography className={\"dialogP\"}>\r\n                  Total Deaths\r\n                  </Typography>\r\n                  <Typography className={\"Deaths\"} variant=\"h5\" component=\"h2\">\r\n                  {props.currentRow.totalDeaths}\r\n                  </Typography>\r\n                  \r\n              \r\n              \r\n              <Typography className={\"dialogP\"}>\r\n                Total Recovered\r\n                </Typography>\r\n                <Typography className={\"Recovered\"} variant=\"h5\" component=\"h2\">\r\n                    {props.currentRow.recovered}\r\n                </Typography>\r\n                  \r\n              \r\n              </div>\r\n              <div className = \"deathssummary\">\r\n              <Typography className={\"dialogP\"}>\r\n                  Newly Confirmed\r\n                  </Typography>\r\n                  <Typography className={\"Total\"} variant=\"h5\" component=\"h2\">\r\n                  {props.currentRow.newCases}\r\n                  </Typography>\r\n                  \r\n              \r\n              \r\n                <Typography className={\"dialogP\"}>\r\n                  New Deaths\r\n                  </Typography>\r\n                  <Typography className={\"Deaths\"} variant=\"h5\" component=\"h2\">\r\n                  {props.currentRow.newDeaths}\r\n                  </Typography>\r\n              </div>\r\n          </div>\r\n          {/* { props.rows.length > 2 ? <Table rows = {props.rows} columns = {props.columns} defaultSort = {\"Cases\"}/> : null} */}\r\n\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button autoFocus onClick={handleClose} color=\"primary\">\r\n            Close\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n}\r\n","/* eslint-disable no-use-before-define */\r\nimport React, {useState} from 'react';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\n// ISO 3166-1 alpha-2\r\n// ⚠️ No support for IE 11\r\nfunction countryToFlag(isoCode) {\r\n  return typeof String.fromCodePoint !== 'undefined'\r\n    ? isoCode\r\n        .toUpperCase()\r\n        .replace(/./g, (char) => String.fromCodePoint(char.charCodeAt(0) + 127397))\r\n    : isoCode;\r\n}\r\n\r\nconst useStyles = makeStyles({\r\n  option: {\r\n    fontSize: 15,\r\n    '& > span': {\r\n      marginRight: 10,\r\n      fontSize: 18,\r\n    },\r\n  },\r\n});\r\n\r\nconst getCountries = (list) => {\r\n    var tempObj = [];\r\n    list.map((eachCountry) => {\r\n        tempObj.push({'label': eachCountry})\r\n    })\r\n    return tempObj;\r\n}\r\n\r\nexport default function CountrySelect(props) {\r\n  const classes = useStyles();\r\n    // const [value, onValueChange] = useState(\"\")\r\n    const countries = getCountries(props.countrySlug)\r\n  return (\r\n    <Autocomplete\r\n      id=\"country-select-demo\"\r\n      style={{ width: 300 }}\r\n      options={countries}\r\n      classes={{\r\n        option: classes.option,\r\n      }}\r\n      onChange={(event, value) => {\r\n        // onValueChange(value)\r\n        props.onChangeSearch(value)\r\n      }}\r\n    //   value={value}\r\n      autoHighlight\r\n      getOptionLabel={(option) => option.label}\r\n      renderOption={(option) => (\r\n        <React.Fragment>\r\n          {/* <span>{countryToFlag(option.code)}</span> */}\r\n          {option.label}\r\n        </React.Fragment>\r\n      )}\r\n      renderInput={(params) => (\r\n        <TextField\r\n          {...params}\r\n          label=\"Choose a country\"\r\n          variant=\"outlined\"\r\n          \r\n          inputProps={{\r\n            ...params.inputProps,\r\n            autoComplete: 'new-password', // disable autocomplete and autofill\r\n          }}\r\n        />\r\n      )}\r\n    />\r\n  );\r\n}\r\n\r\n// From https://bitbucket.org/atlassian/atlaskit-mk-2/raw/4ad0e56649c3e6c973e226b7efaeb28cb240ccb0/packages/core/select/src/data/countries.js\r\n\r\n","import React, { Component } from 'react';\r\nimport axios from 'axios'\r\nimport LoadingOverlay from 'react-loading-overlay';\r\n\r\nimport Table from './table';\r\nimport WorldDetails from './worlddetails';\r\nimport CountryDetails from './dialog';\r\nimport CountrySelect from './search';\r\n\r\n\r\nconst columns = [\r\n    { id: 'country', label: 'Country', minWidth: 170 },\r\n    { id: 'totalCases', label: 'Total Cases', minWidth: 30 },\r\n    { id: 'newCases', label: 'New Cases', minWidth: 30 },\r\n    { id: 'activeCases', label: 'Active Cases', minWidth: 30 },\r\n    { id: 'criticalCases', label: 'Critical Cases', minWidth: 30 },\r\n    { id: 'recovered', label: 'Recovered Cases', minWidth: 30 },\r\n    { id: 'newDeaths', label: 'New Deaths', minWidth: 30 },\r\n    { id: 'totalDeaths', label: 'Total Deaths', minWidth: 30 }\r\n    \r\n];\r\n\r\nconst countryColumn = [\r\n    { id: 'Province', label: 'Province', minWidth: 30 },\r\n    { id: 'City', label: 'City', minWidth: 30 },\r\n    { id: 'Cases', label: 'Cases', minWidth: 30 },\r\n    { id: 'Date', label: 'Date', minWidth: 100 }\r\n];\r\n\r\n\r\n\r\nvar requestOptions = {\r\n    method: 'GET',\r\n    redirect: 'follow'\r\n};\r\n\r\nclass DataSection extends Component {\r\n\r\n    constructor(props){\r\n        super(props)\r\n        this.state = {\r\n            isLoading: true,\r\n            summaryData: [],\r\n            tableRow: [],\r\n            countryData: [],\r\n            countryTableRow: [],\r\n            tableSelection: '',\r\n            currentRow:{},\r\n            searchValue: '',\r\n            worldSummary: {},\r\n            countrySlug:[]\r\n        }\r\n        this.Today = new Date();\r\n        var temp  = new Date();\r\n        temp.setDate(temp.getDate() - 1);\r\n        this.Yesterday = (temp);\r\n    }\r\n\r\n    componentDidMount(){\r\n        \r\n        this.setState({isLoading: true})\r\n        \r\n        var requestOptions = {\r\n            method: 'GET',\r\n            redirect: 'follow'\r\n          };\r\n          \r\n        axios.get(\"https://covid-193.p.rapidapi.com/countries\", {\r\n            \"method\": \"GET\",\r\n            \"headers\": {\r\n                \"x-rapidapi-host\": \"covid-193.p.rapidapi.com\",\r\n                \"x-rapidapi-key\": \"d57969ed8amsh05ce00a7d1d6949p1fc6d8jsn2cff508d63aa\"\r\n            }\r\n        }).then((response) => {\r\n            console.log(response)\r\n            if(response.status === 200){\r\n                this.setState({countrySlug: response.data.response})\r\n            }\r\n        })\r\n        // https://bing.com/covid/data\r\n        axios.get(\"https://covid-193.p.rapidapi.com/statistics\", {\r\n            \"method\": \"GET\",\r\n            \"headers\": {\r\n                \"x-rapidapi-host\": \"covid-193.p.rapidapi.com\",\r\n                \"x-rapidapi-key\": \"d57969ed8amsh05ce00a7d1d6949p1fc6d8jsn2cff508d63aa\"\r\n            }\r\n        }).then((response) => {\r\n            console.log(response);\r\n            if(response.status === 200){\r\n                this.setState({summaryData: response.data.response})\r\n                this.setDataForTable();\r\n            }\r\n        })\r\n\r\n        this.refreshData()\r\n        \r\n        \r\n        \r\n    }\r\n\r\n    refreshData(){\r\n        var self = this;\r\n        setInterval(() => {\r\n            // self.setState({isLoading: true})\r\n            axios.get(\"https://covid-193.p.rapidapi.com/statistics\", {\r\n            \"method\": \"GET\",\r\n            \"headers\": {\r\n                \"x-rapidapi-host\": \"covid-193.p.rapidapi.com\",\r\n                \"x-rapidapi-key\": \"d57969ed8amsh05ce00a7d1d6949p1fc6d8jsn2cff508d63aa\"\r\n            }\r\n            }).then((response) => {\r\n                console.log(response);\r\n                if(response.status === 200){\r\n                    this.setState({summaryData: response.data.response})\r\n                    this.setDataForTable();\r\n                }\r\n            })\r\n        }, 10 * 60 * 1000);\r\n    }\r\n\r\n    // compare(a, b) {\r\n    //     // Use toUpperCase() to ignore character casing\r\n    //     const bandA = a.TotalConfirmed;\r\n    //     const bandB = b.TotalConfirmed;\r\n      \r\n    //     let comparison = 0;\r\n    //     if (bandA < bandB) {\r\n    //       comparison = 1;\r\n    //     } else if (bandA > bandB) {\r\n    //       comparison = -1;\r\n    //     }\r\n    //     return comparison;\r\n    // }\r\n\r\n    setDataForTable(){\r\n        var tempArray = [];\r\n        this.state.summaryData.map((eachCountry) => {\r\n            // var largest = eachCountry;\r\n            tempArray.push(this.createData(eachCountry))\r\n        })\r\n        // tempArray.sort(this.compare);\r\n        this.setState({tableRow: tempArray})\r\n        this.setState({tableOrigRow: tempArray})\r\n        this.setState({isLoading: false})\r\n    }\r\n\r\n    createData(eachData) {\r\n        var tempObj = {};\r\n        // console.log(eachData.cases.active)\r\n        // for (const key in eachData) {\r\n        //     if (eachData.hasOwnProperty(key)) {\r\n        //         const element = eachData[key];\r\n        //         tempObj[key] = element\r\n        //     }\r\n        // }\r\n        // var Country = eachData.country, NewConfirmed = eachData.NewConfirmed, TotalCases =  eachData.cases.total, NewDeaths = eachData.NewDeaths, TotalDeaths = eachData.TotalDeaths, NewRecovered = eachData.NewRecovered, TotalRecovered = eachData.TotalRecovered, slug = eachData.Slug;\r\n        if(eachData.country === \"All\"){\r\n            this.setState({worldSummary: eachData})\r\n        }\r\n        var country = eachData.country;\r\n        var totalCases = eachData.cases.total;\r\n        var newCases = eachData.cases.new;\r\n        var activeCases = eachData.cases.active;\r\n        var criticalCases = eachData.cases.critical;\r\n        var recovered = eachData.cases.recovered;\r\n        var newDeaths = eachData.deaths.new === null ? '' : eachData.deaths.new;\r\n        var totalDeaths = eachData.deaths.total;\r\n\r\n        return {\r\n            country,\r\n            totalCases,\r\n            newCases,\r\n            activeCases,\r\n            criticalCases,\r\n            recovered,\r\n            newDeaths,\r\n            totalDeaths,\r\n        };\r\n    }\r\n\r\n    formatDateT(date){\r\n        var today = date;\r\n        var dd = today.getDate();\r\n\r\n        var mm = today.getMonth()+1; \r\n        var yyyy = today.getFullYear();\r\n        if(dd<10) \r\n        {\r\n            dd='0'+dd;\r\n        } \r\n\r\n        if(mm<10) \r\n        {\r\n            mm='0'+mm;\r\n        } \r\n        return yyyy + '-' + mm + '-' + dd + \"T00:00:00Z\";\r\n        console.log(today);\r\n    }\r\n\r\n    getCurrentSelectedRow(row, setSelected){\r\n        \r\n        this.setState({tableSelection: setSelected, currentRow: row})\r\n        // console.log(row, 'asd')\r\n        // var Today = this.formatDateT(this.Today);\r\n        // var Yesterday = this.formatDateT(this.Yesterday);\r\n\r\n        // var currentSelected = [];\r\n        // this.state.countrySlug.map(slug => {\r\n        //     console.log(slug.Country, row.country, slug.Country.indexOf(row.country))\r\n        //     if(slug.Country.indexOf(row.country) > -1){\r\n        //         currentSelected.push(slug)\r\n        //     }\r\n        // })\r\n        // console.log(currentSelected, 'asd')\r\n\r\n        // axios.get(\"https://api.covid19api.com/country/\"+row.Slug+\"/status/confirmed?from=\"+Yesterday+\"&to=\"+Today, requestOptions).then((response) => {\r\n        //     console.log(response);\r\n        //     if(response.status === 200){\r\n        //         // self.setState({summaryData: response.data})\r\n        //         // self.setDataForTable();\r\n        //         this.setState({countryData: response.data})\r\n        //         this.buildEachCountryTable()\r\n        //     }\r\n        // })\r\n    }\r\n\r\n    buildEachCountryTable(){\r\n        var tempArray = [];\r\n        this.state.countryData.map((eachData) => {\r\n            // var largest = eachCountry;\r\n            tempArray.push(this.createData(eachData))\r\n        })\r\n        this.setState({countryTableRow: tempArray})\r\n    }\r\n    \r\n    onCloseDialog(){\r\n        this.setState({countryTableRow: [], currentRow: {}})\r\n    }\r\n\r\n    onChangeSearch(value){\r\n        // console.log(value)\r\n        if(value !== null){\r\n            this.setState({searchValue: value.label})\r\n        }\r\n        else if(value === null ){\r\n            this.setState({searchValue: \"\"})\r\n\r\n        }\r\n        else{\r\n            this.setState({searchValue: value})\r\n\r\n        }\r\n    }\r\n\r\n    // static getDerivedStateFromProps(props, state){\r\n    //     if(state.searchValue !== this.state.searchValue){\r\n    //         return{\r\n    //             tableRow: this.filterTable()\r\n    //         }\r\n    //     }\r\n    // }\r\n\r\n    componentDidUpdate(prevState, prevProps){\r\n        // console.log(prevState, prevProps, this.state)\r\n        if(prevProps.searchValue !== this.state.searchValue){\r\n            this.setState({tableRow: this.filterTable()})\r\n        }\r\n    }\r\n\r\n    filterTable(){\r\n        var tempArray = [];\r\n        var tempArrayData = [...this.state.tableRow];\r\n        \r\n        if(this.state.searchValue !== \"\"){\r\n            this.state.tableRow.map((eachRow) => {\r\n                if(eachRow.country.toLowerCase().indexOf(this.state.searchValue.toLowerCase()) > -1){\r\n                    tempArray.push(eachRow)\r\n                }\r\n            })\r\n            // console.log(tempArrayData, this.state.tableRow)\r\n            return tempArray\r\n        } \r\n        else{\r\n            // console.log(tempArrayData, this.state.tableRow)\r\n            return this.state.tableOrigRow\r\n\r\n        }\r\n        // this.setState({tableRow: tempArray})\r\n    }\r\n\r\n    render() {\r\n        // console.log(this.state.tableRow)\r\n        return (\r\n            <LoadingOverlay\r\n            active={this.state.isLoading}\r\n            spinner\r\n            text='Loading your content...'\r\n            >\r\n                {Object.keys(this.state.currentRow).length > 0 ? <CountryDetails onCloseDialog = {this.onCloseDialog.bind(this)} currentRow = {this.state.currentRow} tableSelection = {this.state.tableSelection}/> : null}\r\n                {!this.state.isLoading ? <div className = \"Container\">  \r\n                    <WorldDetails details = {this.state.worldSummary}/>\r\n                    <CountrySelect  countrySlug = {this.state.countrySlug}  onChangeSearch = {this.onChangeSearch.bind(this)}/>\r\n                    <Table rows = {this.state.tableRow} columns = {columns} getCurrentSelectedRow = {this.getCurrentSelectedRow.bind(this)} defaultSort = {\"totalCases\"}/>\r\n                </div> : null}\r\n            </LoadingOverlay>\r\n        );\r\n    }\r\n}\r\n\r\nexport default DataSection;","import React from 'react';\nimport './App.css';\n\nimport DataSection from './datasection';\nimport WorldDetials from './worlddetails';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <DataSection/>\n      {/* <WorldDetials/> */}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}